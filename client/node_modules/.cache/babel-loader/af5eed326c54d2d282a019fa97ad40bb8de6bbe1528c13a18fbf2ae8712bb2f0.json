{"ast":null,"code":"import * as yup from 'yup';\nexport const registerSchema = yup.object().shape({\n  RestaurantName: yup.string().required(),\n  RestaurantAddress: yup.string().required(),\n  OwnerNumber: yup.number().required(),\n  CuisineType: yup.string().required()\n});\nexport const addMenuSchema = yup.object().shape({\n  itemName: yup.string().required(),\n  category: yup.string().required(),\n  price: yup.number().required(),\n  menu: yup.mixed().test('fileRequired', 'Please upload a file', function (value) {\n    if (value && value.length > 0) {\n      return true;\n    }\n    return false;\n  })\n});\nexport const userSignUpSchema = yup.object().shape({\n  EmailAddress: yup.string().email('Invalid Email address').required('Email Address is required'),\n  FullName: yup.string().required('Full Name is required'),\n  PhoneNumber: yup.number().min(10).max(10).required('Phone Number is required'),\n  Password: yup.string().required('Password is required').min(5, 'Password should be at least 5 character').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, 'Password must contain uppercase, lowercase, number, and special character'),\n  ConfirmPassword: yup.string().oneOf([yup.ref('Password')], 'Passwords must match').required('Password is required')\n});\nexport const userLoginSchema = yup.object().shape({\n  Email: yup.string().email('Invalid Email address').required('Email Address is required'),\n  Password: yup.string().required('Password is required').min(5, 'Password should be at least 5 character')\n});\nexport const userAddressSchema = yup.object().shape({\n  Name: yup.string().required('name is required'),\n  StreetAddress: yup.string().required('address is required'),\n  Landmark: yup.string().required('landmark is required'),\n  City: yup.string().required('city name is required'),\n  State: yup.string().required('state is required'),\n  Pincode: yup.number().required('pincode is required'),\n  PhoneNumber: yup.number().required('phone number is required').min(10, 'invalid ').max(10),\n  DeliveryType: yup.string().required('address type is required')\n});","map":{"version":3,"names":["yup","registerSchema","object","shape","RestaurantName","string","required","RestaurantAddress","OwnerNumber","number","CuisineType","addMenuSchema","itemName","category","price","menu","mixed","test","value","length","userSignUpSchema","EmailAddress","email","FullName","PhoneNumber","min","max","Password","matches","ConfirmPassword","oneOf","ref","userLoginSchema","Email","userAddressSchema","Name","StreetAddress","Landmark","City","State","Pincode","DeliveryType"],"sources":["C:/Users/USER/Desktop/swiggy/client/src/validation/formValidation.js"],"sourcesContent":["import * as yup from 'yup'\r\n\r\nexport const registerSchema = yup.object().shape({\r\n  RestaurantName: yup.string().required(),\r\n  RestaurantAddress: yup.string().required(),\r\n  OwnerNumber: yup.number().required(),\r\n  CuisineType: yup.string().required(),\r\n\r\n})\r\n\r\n\r\nexport const addMenuSchema = yup.object().shape({\r\n  itemName: yup.string().required(),\r\n  category: yup.string().required(),\r\n  price: yup.number().required(),\r\n  menu: yup.mixed().test('fileRequired', 'Please upload a file', function (value) {\r\n    if (value && value.length > 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }),\r\n})\r\n\r\nexport const userSignUpSchema = yup.object().shape({\r\n  EmailAddress: yup.string().email('Invalid Email address').required('Email Address is required'),\r\n  FullName: yup.string().required('Full Name is required'),\r\n  PhoneNumber: yup.number().min(10).max(10).required('Phone Number is required'),\r\n  Password: yup.string().required('Password is required').min(5, 'Password should be at least 5 character').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, 'Password must contain uppercase, lowercase, number, and special character'),\r\n  ConfirmPassword: yup.string().oneOf([yup.ref('Password')], 'Passwords must match').required('Password is required')\r\n})\r\n\r\nexport const userLoginSchema = yup.object().shape({\r\n  Email: yup.string().email('Invalid Email address').required('Email Address is required'),\r\n  Password: yup.string().required('Password is required').min(5, 'Password should be at least 5 character')\r\n})\r\n\r\nexport const userAddressSchema = yup.object().shape({\r\n  Name: yup.string().required('name is required'),\r\n  StreetAddress: yup.string().required('address is required'),\r\n  Landmark: yup.string().required('landmark is required'),\r\n  City: yup.string().required('city name is required'),\r\n  State: yup.string().required('state is required'),\r\n  Pincode: yup.number().required('pincode is required'),\r\n  PhoneNumber: yup.number().required('phone number is required').min(10,'invalid ').max(10),\r\n  DeliveryType: yup.string().required('address type is required')\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}